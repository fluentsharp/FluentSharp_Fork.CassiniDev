<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="WebdevDirListing" xml:space="preserve">
    <value>Directory Listing -- {0}</value>
  </data>
  <data name="WebdevVwdName" xml:space="preserve">
    <value>CassiniDev Server</value>
  </data>
  <data name="WebdevServerError" xml:space="preserve">
    <value>Server Error in '{0}' Application.</value>
  </data>
  <data name="WebdevVersionInfo" xml:space="preserve">
    <value>Version Information</value>
  </data>
  <data name="WebdevHttpError" xml:space="preserve">
    <value>HTTP Error {0} - {1}.</value>
  </data>
  <data name="WebdevDirNotExist" xml:space="preserve">
    <value>The directory '{0}' does not exist.</value>
  </data>
  <data name="WebdevErrorListeningPort" xml:space="preserve">
    <value>CassiniDev Server failed to start listening on port {0}.
 Error message:
 {1}</value>
  </data>
  <data name="WebdevInvalidPort" xml:space="preserve">
    <value>Invalid port'{0}'</value>
  </data>
  <data name="WebdevName" xml:space="preserve">
    <value>CassiniDev Server</value>
  </data>
  <data name="WebdevNameWithPort" xml:space="preserve">
    <value>CassiniDev Server - Port {0}</value>
  </data>
  <data name="WebdevOpenInBrowser" xml:space="preserve">
    <value>Open in Web Browser</value>
  </data>
  <data name="WebdevRunAspNetLocally" xml:space="preserve">
    <value>Run ASP.NET applications locally.</value>
  </data>
  <data name="WebdevShowDetail" xml:space="preserve">
    <value>Show Details</value>
  </data>
  <data name="WebdevStop" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="WebdevUsagestr1" xml:space="preserve">
    <value>CassiniDev Server Usage:
 </value>
  </data>
  <data name="WebdevUsagestr2" xml:space="preserve">
    <value>WebDev.WebServer /port:&lt;port number&gt; /path:&lt;physical path&gt; [/vpath:&lt;virtual path&gt;]

</value>
  </data>
  <data name="WebdevUsagestr3" xml:space="preserve">
    <value>	port number:
		[Optional] An unused port number between 1 and 65535.
		The default is 80 (usable if you do not also have IIS listening on the same port).

</value>
  </data>
  <data name="WebdevUsagestr4" xml:space="preserve">
    <value>	physical path:
		A valid directory name where the Web application is rooted.

</value>
  </data>
  <data name="WebdevUsagestr5" xml:space="preserve">
    <value>	virtual path:
		[Optional] The virtual path or application root in the form of '/&lt;app name&gt;'.
		The default is simply '/'.

</value>
  </data>
  <data name="WebdevUsagestr6" xml:space="preserve">
    <value>Example:
WebDev.WebServer /port:8080 /path:"c:\inetpub\wwwroot\MyApp" /vpath:"/MyApp"

</value>
  </data>
  <data name="WebdevUsagestr7" xml:space="preserve">
    <value>You can then access the Web application using a URL of the form:
	http://localhost:8080/MyApp</value>
  </data>
  <data name="WebdevLogViewerNameWithPort" xml:space="preserve">
    <value>CassiniDev Server - Port {0} - Log Viewer</value>
  </data>
  <data name="WebdevInMemoryLogging" xml:space="preserve">
    <value>In memory logging is enabled. 

Events are only captured when the Log window is visible 
and all data will be lost when this window is closed.

Install the latest System.Data.SQLite package to enable
log persistence.</value>
  </data>
  <data name="WebdevAspNetVersion" xml:space="preserve">
    <value>ASP.Net Version: {0}</value>
  </data>
  <data name="WebdevStart" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="ErrApplicationPathIsNull" xml:space="preserve">
    <value>ApplicationPath is null</value>
  </data>
  <data name="ErrFailedToStartCassiniDevServerOnPortError" xml:space="preserve">
    <value>Failed to start CassiniDev Server on Port:{0} Error:{1} {2}</value>
  </data>
  <data name="ErrInvalidHostname" xml:space="preserve">
    <value>Invalid Hostname {0}</value>
  </data>
  <data name="ErrInvalidIPAddress" xml:space="preserve">
    <value>Invalid IP Address {0}</value>
  </data>
  <data name="ErrInvalidIPMode" xml:space="preserve">
    <value>Invalid IPMode {0}</value>
  </data>
  <data name="ErrInvalidPortMode" xml:space="preserve">
    <value>Invalid PortMode</value>
  </data>
  <data name="ErrInvalidPortRangeValue" xml:space="preserve">
    <value>Invalid port range value {0}</value>
  </data>
  <data name="ErrNoAvailablePortFound" xml:space="preserve">
    <value>No available port found.</value>
  </data>
  <data name="ErrPortIsInUse" xml:space="preserve">
    <value>Port is in use {0}</value>
  </data>
  <data name="ErrPortOutOfRange" xml:space="preserve">
    <value>Port out of range: {0}</value>
  </data>
  <data name="ErrPortRangeEndMustBeEqualOrGreaterThanPortRangeSta" xml:space="preserve">
    <value>Port range end must be equal or greater than port range start {0} {1}</value>
  </data>
</root>